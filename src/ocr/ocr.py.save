from PyPDF2 import PdfFileWriter, PdfFileReader
from pdf2image import convert_from_path
from PIL import Image

import pytesseract
import pdb
import cv2
import os


def convert_pdf_to_images(pdf_filepath: str, img_filepath: str = "", saving_folder: str = ""):
    if pdf_filepath.endswith(".pdf") == False:
        return
    img_filepath = os.path.splitext(pdf_filepath)[0]
    if len(saving_folder):
        img_filepath = saving_folder + img_filepath[img_filepath.rfind("/"):]
    if os.path.exists(img_filepath + "_image_0.jpeg"):
        return
    # print(pdf_filepath)
    try:
        pages = convert_from_path(pdf_filepath, 500)
    except MemoryError, :
        return
    for i, page in enumerate(pages):
        page.save(img_filepath + f"_image_{i}.jpeg", "JPEG")



def convert_pdf_to_pdfs(pdf_filepath: str):
    input_pdf = PdfFileReader(open(pdf_filepath, "rb"))
    save_filepath = os.path.splitext(pdf_filepath)[0]
    for i in range(input_pdf.numPages):
        output = PdfFileWriter()
        output.addPage(input_pdf.getPage(i))
        with open(save_filepath + f"_page_{i}.pdf", "wb") as output_stream:
            output.write(output_stream)


def get_consecutive_pages_fron_pdf(pdf_filepath: str):
    input_pdf = PdfFileReader(open(pdf_filepath, "rb"))
    save_filepath = os.path.splitext(pdf_filepath)[0]
    for i in range(input_pdf.numPages - 1):
        output = PdfFileWriter()
        output.addPage(input_pdf.getPage(i))
        output.addPage(input_pdf.getPage(i + 1))
        with open(save_filepath + f"_pages_{i}_{i + 1}.pdf", "wb") as output_stream:
            output.write(output_stream)

def get_text_from_image(image, preprocess=None):
    print(type(image))
    pdb.set_trace()
    # check to see if we should apply thresholding to preprocess the
    # image
    if preprocess == "thresh":
        gray = cv2.threshold(image, 0, 255,
                             cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
    # make a check to see if median blurring should be done to remove
    # noise
    elif preprocess == "blur":
        gray = cv2.medianBlur(image, 3)
    else:
        gray = image

    # write the grayscale image to disk as a temporary file so we can
    # apply OCR to it
    filename = "{}.png".format(os.getpid())
    cv2.imwrite(filename, gray)

    # load the image as a PIL/Pillow image, apply OCR, and then delete
    # the temporary file
    text = pytesseract.image_to_string(Image.open(filename))
    # os.remove(filename)

    return text

from tqdm import tqdm

def main():
    pdf_filepath = "data/azure_data_for_ocr/DA_SILOZ"
    saving_filepath = "data/azure_data_for_ocr/DA_SILOZ_images"
    for i, file in tqdm(enumerate(os.listdir(pdf_filepath))):

        # if i >= 1:
        #     break
        convert_pdf_to_images(os.path.join(pdf_filepath, file), saving_folder=saving_filepath)

    # filepath = "data/ocr_data/cv/index.png"
    # img = cv2.imread(filepath)
    # print(get_text_from_image(img))


if __name__ == '__main__':
    main()
